---

# load_balanced_roles items name must only contain underscore as word separator and not hyphen 


- set_fact: {"{{ (item.name+'_instances') }}": "{% for result in ec2_instances.results %}{% if not result|skipped %}{% for tagged in result.tagged_instances %}{% if item.name in tagged.tags.roles.split(',') %}{{ tagged.id }} {% endif %}{% endfor %}{% endif %}{% endfor %}"}
  with_items: '{{ load_balanced_roles }}'

- debug: msg="{{ vars[item.name +'_instances'] }}"
  with_items: '{{ load_balanced_roles }}'

- name: "Create load-balancer"
  with_items: '{{ load_balanced_roles }}'
  register: roles_elbs
  ec2_elb_lb:
    name: "{{ envname }}-{{ item.name|replace('_', '-') }}"
    region: '{{ region }}'
    state: present
    # subnets: "{{ vpc_subnet.results|selectattr('subnet.tags.type', 'equalto', 'public')|list|map(attribute='subnet.id')|list }}"
    subnets: "{{ vpc_subnet.results|selectattr('subnet.tags.type', 'equalto', 'public')|selectattr('subnet.tags.category', 'equalto', 'application')|list|map(attribute='subnet.id')|list }}"
    instance_ids: "{{ vars[item.name +'_instances'].strip().split(' ') }}"
    security_group_names: [web_lb, allow_vpc]
    cross_az_load_balancing: yes
    # changed to one below because of a bug in Ansible 2.1.x.
    # security_group_ids:
    
    #   - '{{ (ec2_security_groups.results|selectattr("invocation.module_args.name", "equalto", "allow_vpc")|first).group_id }}'
    #   - '{{ (ec2_security_groups.results|selectattr("invocation.module_args.name", "equalto", "web_lb")|first).group_id }}'
    wait: True
    stickiness:
      type: "{{ item.stickiness.type }}"
      enabled: "{{ item.stickiness.enabled }}"
      expiration: "{{ item.stickiness.expiration }}"

    health_check:
      ping_protocol: "{{ item.health_check.ping_protocol }}"
      ping_port: "{{ item.health_check.ping_port }}"
      ping_path: "{{ item.health_check.ping_path }}"
      response_timeout: "{{ item.health_check.response_timeout }}"
      interval: "{{ item.health_check.interval }}"
      unhealthy_threshold: "{{ item.health_check.unhealthy_threshold }}"
      healthy_threshold: "{{ item.health_check.healthy_threshold }}"

    listeners:
      - protocol: https
        load_balancer_port: 443
        instance_protocol: "{{ item.instance_protocol }}"
        instance_port: "{{ item.instance_port }}"
        proxy_protocol: True
        ssl_certificate_id: "{{ item.ssl_certificate_arn }}" 
